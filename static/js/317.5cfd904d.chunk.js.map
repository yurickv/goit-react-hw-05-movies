{"version":3,"file":"static/js/317.5cfd904d.chunk.js","mappings":"8LAUaA,GAAMC,EAAAA,EAAAA,IAAO,MAAPA,CACjBC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,G,kMCdFC,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAEHC,EAAc,mCAAG,WAAOC,GAAP,yFACHH,EAAAA,EAAAA,IAAA,sCAAyCC,GAC5D,CAAEG,OAAQD,EAAWC,SAFC,uBAClBC,EADkB,EAClBA,KADkB,kBAInBA,EAAKC,SAJc,2CAAH,sDAOdC,EAAU,mCAAG,WAAOC,EAASL,GAAhB,yFACCH,EAAAA,EAAAA,IAAA,iBAAoBQ,EAApB,oBAAuCP,EAAvC,mBACnB,CAAEG,OAAQD,EAAWC,SAFH,uBACdC,EADc,EACdA,KADc,kBAIfA,GAJe,2CAAH,wDAOVI,EAAc,mCAAG,WAAOC,EAAMP,GAAb,yFACHH,EAAAA,EAAAA,IAAA,gCAAmCC,EAAnC,kBAAoDS,EAApD,+BACnB,CAAEN,OAAQD,EAAWC,SAFC,uBAClBC,EADkB,EAClBA,KADkB,kBAInBA,EAAKC,SAJc,2CAAH,wDAOdK,EAAY,mCAAG,WAAOH,EAASL,GAAhB,yFACDH,EAAAA,EAAAA,IAAA,iBAAoBQ,EAApB,4BAA+CP,EAA/C,mBACnB,CAAEG,OAAQD,EAAWC,SAFD,uBAChBC,EADgB,EAChBA,KADgB,kBAIjBA,EAAKO,MAJY,2CAAH,wDAOZC,EAAe,mCAAG,WAAOL,EAASL,GAAhB,yFACJH,EAAAA,EAAAA,IAAA,iBAAoBQ,EAApB,4BAA+CP,EAA/C,mBACnB,CAAEG,OAAQD,EAAWC,SAFE,uBACnBC,EADmB,EACnBA,KADmB,kBAIhBA,GAJgB,2CAAH,uD,2GC9BfS,EAAYrB,EAAAA,GAAAA,EAAH,gEACL,qBAAGsB,MAAkBC,MAAMC,MAA3B,IACF,qBAAGF,MAAkBG,UAAUC,CAA/B,IAGFC,EAAiB3B,EAAAA,GAAAA,EAAH,6CACV,qBAAGsB,MAAkBC,MAAMK,SAA3B,IAGJC,EAAW7B,EAAAA,GAAAA,GAAH,wY,yIC4BrB,EAlCa,WACT,MCH4B,WAC5B,OAA4B8B,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEQC,GAAOC,EAAAA,EAAAA,MAAPD,GAsBR,OAnBAE,EAAAA,EAAAA,YAAU,WACN,IAAM7B,EAAa,IAAI8B,gBACjBC,EAAc,mCAAG,oGAEfP,GAAa,GAFE,UAIYhB,EAAAA,EAAAA,IAAamB,EAAI3B,GAJ7B,OAITgC,EAJS,OAKfV,EAAUU,GALK,gDAOfN,EAAS,KAAMO,SAPA,yBASfT,GAAa,GACbxB,EAAWkC,QAVI,4EAAH,qDAapBH,GAEH,GAAE,CAACJ,IAEG,CAAEN,OAAAA,EAAQE,UAAAA,EAAWE,MAAAA,EAC/B,CDzBsBU,GAAXd,EAAR,EAAQA,OAER,OACIA,IACI,SAACF,EAAD,UACKE,EAAOe,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,aAAcC,EAAoB,EAApBA,UAAWZ,EAAS,EAATA,GAC1C,OAAIW,GAEI,2BACI,gBAAKE,IART,kCAQgCF,EAAcG,IAAG,gBAAWJ,EAAX,QAC7C,UAAChD,EAAA,EAAD,CAAKqD,GAAG,IAAR,WACI,SAAC/B,EAAD,UAAY0B,KACZ,UAACpB,EAAD,WAAgB,cAAYsB,UAJ3BZ,IAUT,2BACI,gBAAKa,IAAKG,EAAgBF,IAAG,gBAAWJ,GAAQO,OAAQ,OACxD,UAACvD,EAAA,EAAD,CAAKqD,GAAG,IAAR,WACI,SAAC/B,EAAD,UAAY0B,KACZ,UAACpB,EAAD,WAAgB,cAAYsB,UAJ3BZ,EAUpB,KAIhB,C","sources":["Servise/Box.jsx","Servise/Movie-serviseAPI.js","components/Cast/Cast.styled.js","components/Cast/Cast.jsx","Hooks/useFetchFilmCast.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport {\n  color,\n  space,\n  layout,\n  typography,\n  flexbox,\n  border,\n} from 'styled-system';\n\nexport const Box = styled('div')(\n  color,\n  space,\n  layout,\n  typography,\n  flexbox,\n  border\n);","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '543e36a38e5b1b446ccf2af6eb6b1556'\n\nexport const getTrendMovies = async (controller) => {\n    const { data } = await axios.get(`/trending/movie/day?api_key=${API_KEY}`,\n        { signal: controller.signal }\n    );\n    return data.results;\n};\n\nexport const getMovieID = async (movieId, controller) => {\n    const { data } = await axios.get(`/movie/${movieId}?api_key=${API_KEY}&language=en-US`,\n        { signal: controller.signal }\n    );\n    return data;\n};\n\nexport const getMovieSearch = async (film, controller) => {\n    const { data } = await axios.get(`/search/movie?api_key=${API_KEY}&query=${film}&page=1&include_adult=false`,\n        { signal: controller.signal }\n    );\n    return data.results;\n};\n\nexport const getMovieCast = async (movieId, controller) => {\n    const { data } = await axios.get(`/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`,\n        { signal: controller.signal }\n    );\n    return data.cast;\n};\n\nexport const getMovieReviews = async (movieId, controller) => {\n    const { data } = await axios.get(`/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`,\n        { signal: controller.signal }\n    );\n        return data;\n};","import styled from 'styled-components';\n\n\nexport const ActorName = styled.p`\n  font-family: ${({ theme }) => theme.fonts.roboto};\n  font-size: ${({ theme }) => theme.fontSizes.m};\n`;\n\nexport const ActorCharacter = styled.p`\n  font-family: ${({ theme }) => theme.fonts.monospace};\n`;\n\nexport const CastList = styled.ul`\n  padding: 20px 0;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 16px;\n  list-style: none;\n  li {\n    box-shadow: 0px 10px 10px rgba(46, 47, 66, 0.08),\n      0px 1px 1px rgba(46, 47, 66, 0.16), 0px 2px 1px rgba(46, 47, 66, 0.08);\n    padding: 10px;\n    border-radius: 5px;\n    background-color: #edf3fb;\n    width: 150px;\n  }\n  img {\n    width: 100%;\n  }\n`;","import { Box } from '../../Servise/Box';\nimport { CastList, ActorName, ActorCharacter } from './Cast.styled';\nimport { useFetchFilmCast } from '../../Hooks/useFetchFilmCast';\n// зображення користувача за замовчуванням\nimport defaultPicture from './default-foto.png';\n\nconst Cast = () => {\n    const { actors } = useFetchFilmCast();\n    const imageDefaultUrl = 'https://image.tmdb.org/t/p/w200';\n    return (\n        actors && (\n            <CastList>\n                {actors.map(({ name, profile_path, character, id }) => {\n                    if (profile_path) {\n                        return (\n                            <li key={id}>\n                                <img src={imageDefaultUrl + profile_path} alt={`actor ${name} `} />\n                                <Box ml=\"4\">\n                                    <ActorName>{name}</ActorName>\n                                    <ActorCharacter>Character: {character}</ActorCharacter>\n                                </Box>\n                            </li>\n                        );\n                    } else {\n                        return (\n                            <li key={id}>\n                                <img src={defaultPicture} alt={`actor ${name}`} height={225} />\n                                <Box ml=\"4\">\n                                    <ActorName>{name}</ActorName>\n                                    <ActorCharacter>Character: {character}</ActorCharacter>\n                                </Box>\n                            </li>\n                        )\n                    }\n\n                })}\n            </CastList>\n        )\n    );\n};\nexport default Cast;","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCast } from 'Servise/Movie-serviseAPI';\n\nexport const useFetchFilmCast = () => {\n    const [actors, setActors] = useState(null);\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const { id } = useParams();\n\n\n    useEffect(() => {\n        const controller = new AbortController();\n        const fetchDataMovie = async () => {\n            try {\n                setIsLoading(true);\n\n                const fetchedMovie = await getMovieCast(id, controller);\n                setActors(fetchedMovie);\n            } catch (error) {\n                setError(error.message);\n            } finally {\n                setIsLoading(false);\n                controller.abort();\n            }\n        };\n        fetchDataMovie();\n\n    }, [id]);\n\n    return { actors, isLoading, error };\n};"],"names":["Box","styled","color","space","layout","typography","flexbox","border","axios","API_KEY","getTrendMovies","controller","signal","data","results","getMovieID","movieId","getMovieSearch","film","getMovieCast","cast","getMovieReviews","ActorName","theme","fonts","roboto","fontSizes","m","ActorCharacter","monospace","CastList","useState","actors","setActors","isLoading","setIsLoading","error","setError","id","useParams","useEffect","AbortController","fetchDataMovie","fetchedMovie","message","abort","useFetchFilmCast","map","name","profile_path","character","src","alt","ml","defaultPicture","height"],"sourceRoot":""}