{"version":3,"file":"static/js/824.2c39fab3.chunk.js","mappings":"kTAEAA,EAAAA,EAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCAEHC,EAAc,mCAAG,WAAOC,GAAP,yFACHH,EAAAA,EAAAA,IAAA,sCAAyCC,GAC5D,CAAEG,OAAQD,EAAWC,SAFC,uBAClBC,EADkB,EAClBA,KADkB,kBAInBA,EAAKC,SAJc,2CAAH,sDAOdC,EAAU,mCAAG,WAAOC,EAASL,GAAhB,yFACCH,EAAAA,EAAAA,IAAA,iBAAoBQ,EAApB,oBAAuCP,EAAvC,mBACnB,CAAEG,OAAQD,EAAWC,SAFH,uBACdC,EADc,EACdA,KADc,kBAIfA,GAJe,2CAAH,wDAOVI,EAAc,mCAAG,WAAOC,EAAMP,GAAb,yFACHH,EAAAA,EAAAA,IAAA,gCAAmCC,EAAnC,kBAAoDS,EAApD,+BACnB,CAAEN,OAAQD,EAAWC,SAFC,uBAClBC,EADkB,EAClBA,KADkB,kBAInBA,EAAKC,SAJc,2CAAH,wDAOdK,EAAY,mCAAG,WAAOH,EAASL,GAAhB,yFACDH,EAAAA,EAAAA,IAAA,iBAAoBQ,EAApB,4BAA+CP,EAA/C,mBACnB,CAAEG,OAAQD,EAAWC,SAFD,uBAChBC,EADgB,EAChBA,KADgB,kBAIjBA,EAAKO,MAJY,2CAAH,wDAOZC,EAAe,mCAAG,WAAOL,EAASL,GAAhB,yFACJH,EAAAA,EAAAA,IAAA,iBAAoBQ,EAApB,4BAA+CP,EAA/C,mBACnB,CAAEG,OAAQD,EAAWC,SAFE,uBACnBC,EADmB,EACnBA,KADmB,kBAIhBA,GAJgB,2CAAH,uD,mGC/BfS,EAAaC,EAAAA,GAAAA,GAAH,+EAEF,qBAAGC,MAAkBC,MAAM,EAA3B,IAGRC,EAAaH,EAAAA,GAAAA,GAAH,sEACN,qBAAGC,MAAkBG,MAAMC,MAA3B,IACE,qBAAGJ,MAAkBC,MAAM,EAA3B,IAGNI,EAASN,EAAAA,GAAAA,EAAH,6CACF,qBAAGC,MAAkBG,MAAMG,SAA3B,IAEJC,EAAcR,EAAAA,GAAAA,GAAH,qV,8ECMxB,EAjBgB,WACZ,MCD+B,WAC/B,OAA8BS,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEQC,GAAOC,EAAAA,EAAAA,MAAPD,GAqBR,OAnBAE,EAAAA,EAAAA,YAAU,WACN,IAAM9B,EAAa,IAAI+B,gBACjBC,EAAc,mCAAG,sGAEfP,GAAa,GAFE,UAIWf,EAAAA,EAAAA,IAAgBkB,EAAI5B,GAJ/B,gBAIPG,EAJO,EAIPA,QACRoB,EAAWpB,GALI,gDAOfwB,EAAS,KAAMM,SAPA,yBASfR,GAAa,GACbzB,EAAWkC,QAVI,4EAAH,qDAapBF,GAEH,GAAE,CAACJ,IAEG,CAAEN,QAAAA,EAASE,UAAAA,EAAWE,MAAAA,EAChC,CD1BuBS,GAAZb,EAAR,EAAQA,QAGR,OAAOA,EAAQc,OAAS,GACpB,SAAChB,EAAD,UACKE,EAAQe,KAAI,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAASX,EAApB,EAAoBA,GAApB,OACT,UAACjB,EAAD,YACI,UAACI,EAAD,WAAY,WAASuB,MACrB,SAACpB,EAAD,UAASqB,MAFIX,EADR,OAQjB,SAACV,EAAD,UAAQ,4CAEf,C","sources":["Servise/Movie-serviseAPI.js","components/Reviews/Revievs.styled.js","components/Reviews/Reviews.jsx","Hooks/useFetchFilmReviews.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '543e36a38e5b1b446ccf2af6eb6b1556'\n\nexport const getTrendMovies = async (controller) => {\n    const { data } = await axios.get(`/trending/movie/day?api_key=${API_KEY}`,\n        { signal: controller.signal }\n    );\n    return data.results;\n};\n\nexport const getMovieID = async (movieId, controller) => {\n    const { data } = await axios.get(`/movie/${movieId}?api_key=${API_KEY}&language=en-US`,\n        { signal: controller.signal }\n    );\n    return data;\n};\n\nexport const getMovieSearch = async (film, controller) => {\n    const { data } = await axios.get(`/search/movie?api_key=${API_KEY}&query=${film}&page=1&include_adult=false`,\n        { signal: controller.signal }\n    );\n    return data.results;\n};\n\nexport const getMovieCast = async (movieId, controller) => {\n    const { data } = await axios.get(`/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`,\n        { signal: controller.signal }\n    );\n    return data.cast;\n};\n\nexport const getMovieReviews = async (movieId, controller) => {\n    const { data } = await axios.get(`/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`,\n        { signal: controller.signal }\n    );\n        return data;\n};","import styled from 'styled-components';\n\nexport const ReviewItem = styled.li`\n  :not(:last-child) {\n    margin-bottom: ${({ theme }) => theme.space[5]}px;\n  }\n`;\nexport const AuthorName = styled.h3`\n  font-family: ${({ theme }) => theme.fonts.roboto};\n  margin-bottom: ${({ theme }) => theme.space[3]}px;\n`;\n\nexport const Review = styled.p`\n  font-family: ${({ theme }) => theme.fonts.monospace};\n`;\nexport const ReviewsList = styled.ul`\n  padding: 20px 0;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 16px;\n  list-style: none;\n  li {\n    box-shadow: 0px 10px 10px rgba(46, 47, 66, 0.08),\n      0px 1px 1px rgba(46, 47, 66, 0.16), 0px 2px 1px rgba(46, 47, 66, 0.08);\n    padding: 10px;\n    border-radius: 5px;\n    background-color: #edf3fb;\n  }\n`;","import { ReviewItem, AuthorName, Review, ReviewsList } from './Revievs.styled';\nimport { useFetchFilmReviews } from '../../Hooks/useFetchFilmReviews';\n\n\nconst Reviews = () => {\n    const { reviews } = useFetchFilmReviews();\n\n\n    return reviews.length > 0 ? (\n        <ReviewsList>\n            {reviews.map(({ author, content, id }) => (\n                <ReviewItem key={id}>\n                    <AuthorName>Author: {author}</AuthorName>\n                    <Review>{content}</Review>\n                </ReviewItem>\n            ))}\n        </ReviewsList>\n    ) : (\n        <Review> There are yet no reviews for this film.</Review>\n    );\n};\nexport default Reviews;","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieReviews } from 'Servise/Movie-serviseAPI';\n\nexport const useFetchFilmReviews = () => {\n    const [reviews, setReviews] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const { id } = useParams();\n\n    useEffect(() => {\n        const controller = new AbortController();\n        const fetchDataMovie = async () => {\n            try {\n                setIsLoading(true);\n\n                const { results } = await getMovieReviews(id, controller);\n                setReviews(results);\n            } catch (error) {\n                setError(error.message);\n            } finally {\n                setIsLoading(false);\n                controller.abort();\n            }\n        };\n        fetchDataMovie();\n\n    }, [id]);\n\n    return { reviews, isLoading, error };\n};"],"names":["axios","API_KEY","getTrendMovies","controller","signal","data","results","getMovieID","movieId","getMovieSearch","film","getMovieCast","cast","getMovieReviews","ReviewItem","styled","theme","space","AuthorName","fonts","roboto","Review","monospace","ReviewsList","useState","reviews","setReviews","isLoading","setIsLoading","error","setError","id","useParams","useEffect","AbortController","fetchDataMovie","message","abort","useFetchFilmReviews","length","map","author","content"],"sourceRoot":""}