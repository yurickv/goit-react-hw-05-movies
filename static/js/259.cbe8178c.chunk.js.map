{"version":3,"file":"static/js/259.cbe8178c.chunk.js","mappings":"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","sources":["Servise/Movie-serviseAPI.js","styled-component/Cast.styled.js","components/Cast.jsx","Hooks/useFetchFilmCast.jsx","styled-component/Box.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '543e36a38e5b1b446ccf2af6eb6b1556'\n\nexport const getTrendMovies = async (controller) => {\n    const { data } = await axios.get(`/trending/movie/day?api_key=${API_KEY}`,\n        { signal: controller.signal }\n    );\n    return data.results;\n};\n\nexport const getMovieID = async (movieId, controller) => {\n    const { data } = await axios.get(`/movie/${movieId}?api_key=${API_KEY}&language=en-US`,\n        { signal: controller.signal }\n    );\n    return data;\n};\n\nexport const getMovieSearch = async (film, controller) => {\n    const { data } = await axios.get(`/search/movie?api_key=${API_KEY}&query=${film}&page=1&include_adult=false`,\n        { signal: controller.signal }\n    );\n    return data.results;\n};\n\nexport const getMovieCast = async (movieId, controller) => {\n    const { data } = await axios.get(`/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`,\n        { signal: controller.signal }\n    );\n    return data.cast;\n};\n\nexport const getMovieReviews = async (movieId, controller) => {\n    const { data } = await axios.get(`/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US`,\n        { signal: controller.signal }\n    );\n        return data;\n};","import styled from 'styled-components';\n\nexport const Actor = styled.li`\n  display: flex;\n  align-items: center;\n  margin-bottom: ${({ theme }) => theme.space[4]}px;\n`;\n\nexport const ActorName = styled.p`\n  font-family: ${({ theme }) => theme.fonts.roboto};\n  font-size: ${({ theme }) => theme.fontSizes.l};\n`;\n\nexport const ActorCharacter = styled.p`\n  font-family: ${({ theme }) => theme.fonts.monospace};\n`;","import { Box } from '../styled-component/Box';\nimport { ActorName, Actor, ActorCharacter } from '../styled-component/Cast.styled';\nimport { useFetchFilmCast } from '../Hooks/useFetchFilmCast';\n\nconst Cast = () => {\n    const { actors } = useFetchFilmCast();\n    const imageDefaultUrl = 'https://image.tmdb.org/t/p/w200';\n    return (\n        actors && (\n            <Box as=\"ul\" p=\"4\">\n                {actors.map(({ name, profile_path, character, id }) => (\n                    <Actor key={id}>\n                        <img src={imageDefaultUrl + profile_path} alt={`actor ${name} `} />\n                        <Box ml=\"4\">\n                            <ActorName>{name}</ActorName>\n                            <ActorCharacter>{character}</ActorCharacter>\n                        </Box>\n                    </Actor>\n                ))}\n            </Box>\n        )\n    );\n};\nexport default Cast;","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCast } from 'Servise/Movie-serviseAPI';\n\nexport const useFetchFilmCast = () => {\n    const [actors, setActors] = useState(null);\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const { id } = useParams();\n\n\n    useEffect(() => {\n        const controller = new AbortController();\n        const fetchDataMovie = async () => {\n            try {\n                setIsLoading(true);\n\n                const fetchedMovie = await getMovieCast(id, controller);\n                setActors(fetchedMovie);\n            } catch (error) {\n                setError(error.message);\n            } finally {\n                setIsLoading(false);\n                controller.abort();\n            }\n        };\n        fetchDataMovie();\n\n    }, [id]);\n\n    return { actors, isLoading, error };\n};","import styled from 'styled-components';\nimport {\n  color,\n  space,\n  layout,\n  typography,\n  flexbox,\n  border,\n} from 'styled-system';\n\nexport const Box = styled('div')(\n  color,\n  space,\n  layout,\n  typography,\n  flexbox,\n  border\n);"],"names":["axios","API_KEY","getTrendMovies","controller","signal","data","results","getMovieID","movieId","getMovieSearch","film","getMovieCast","cast","getMovieReviews","Actor","styled","theme","space","ActorName","fonts","roboto","fontSizes","l","ActorCharacter","monospace","useState","actors","setActors","isLoading","setIsLoading","error","setError","id","useParams","useEffect","AbortController","fetchDataMovie","fetchedMovie","message","abort","useFetchFilmCast","Box","as","p","map","name","profile_path","character","src","alt","ml","color","layout","typography","flexbox","border"],"sourceRoot":""}