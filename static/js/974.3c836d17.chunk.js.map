{"version":3,"file":"static/js/974.3c836d17.chunk.js","mappings":"+MAEaA,EAAQC,EAAAA,GAAAA,GAAH,6FAED,qBAAGC,MAAkBC,MAAMC,MAA3B,IACE,qBAAGF,MAAkBG,MAAM,EAA3B,IAGNC,EAAaL,EAAAA,GAAAA,GAAH,wRAaVM,EAAaN,EAAAA,GAAAA,GAAH,6CACN,qBAAGC,MAAkBC,MAAMK,SAA3B,I,2GClBJC,EAAY,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClBC,GAAWC,EAAAA,EAAAA,MAGjB,OACI,SAACN,EAAD,CAAYO,GAAG,KAAf,SACKH,EAAOI,KAAI,gBAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,GAAIC,EAAd,EAAcA,YAAd,OACR,yBACI,UAAC,KAAD,CAASC,GAAE,UAAKC,EAAAA,EAAAA,OAAL,YAAsBH,GAAMI,MAAO,CAAEC,KAAMV,GAAtD,WACI,gBAAKW,IAPD,kCAOwBL,EAAaM,IAAKR,KAC9C,SAACR,EAAD,UAAaQ,QAHZC,EADD,KAUvB,ECAD,EAda,WACT,MCJ0B,WAC1B,OAAwCQ,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,MAAnC,eAAOK,EAAP,KAAcC,EAAd,KAyBA,OAvBAC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAa,IAAIC,gBAEjBC,EAAS,mCAAG,oGAEVN,GAAa,GAFH,UAIqBO,EAAAA,EAAAA,GAAeH,GAJpC,OAIJI,EAJI,OAKVV,EAAgBU,GALN,gDAOVN,EAAS,KAAMO,SAPL,yBASVT,GAAa,GACbI,EAAWM,QAVD,4EAAH,qDAafJ,GAKH,GAAE,IAEI,CAAET,aAAAA,EAAcE,UAAAA,EAAWE,MAAAA,EACrC,CDzB8CU,GAAnCd,EAAR,EAAQA,aAAcE,EAAtB,EAAsBA,UAAWE,EAAjC,EAAiCA,MAEjC,OACI,UAACW,EAAA,EAAD,YACI,SAACxC,EAAD,UAAO,mBACN2B,IAAa,SAACc,EAAA,EAAD,IACbZ,IAAS,SAAC7B,EAAD,UAAQ6B,IACjBJ,EAAaiB,SAAU,SAACjC,EAAD,CAAWC,OAAQe,MAItD,C","sources":["styled-component/Home.styled.js","components/FilmsList.jsx","pages/Home.jsx","Hooks/useFetchTrends.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Title = styled.h1`\n  text-align: center;\n  font-family: ${({ theme }) => theme.fonts.roboto};\n  margin-bottom: ${({ theme }) => theme.space[4]}px;\n`;\n\nexport const MuviesList = styled.ul`\n  display: grid;\n  max-width: calc(100vw - 48px);\n  grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n  grid-gap: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const MovieTitle = styled.h2`\n  font-family: ${({ theme }) => theme.fonts.monospace};\n`;","import { MuviesList, MovieTitle } from '../styled-component/Home.styled'\nimport { NavLink, useLocation } from \"react-router-dom\";\nimport { routes } from '../routes';\n\nexport const FilmsList = ({ movies }) => {\n    const location = useLocation();\n    const imageDefaultUrl = 'https://image.tmdb.org/t/p/w300';\n\n    return (\n        <MuviesList as=\"ul\">\n            {movies.map(({ title, id, poster_path }) => (\n                <li key={id}>\n                    <NavLink to={`${routes.MOVIES}/${id}`} state={{ from: location }}>\n                        <img src={imageDefaultUrl + poster_path} alt={title} />\n                        <MovieTitle>{title}</MovieTitle>\n                    </NavLink>\n                </li>\n            ))}\n        </MuviesList>\n    )\n}","import { Title } from '../styled-component/Home.styled';\nimport { Box } from '../styled-component/Box'\nimport { useFetchTrends } from 'Hooks/useFetchTrends';\nimport { Loader } from 'components/Loader';\nimport { FilmsList } from 'components/FilmsList';\n\nconst Home = () => {\n    const { moviesTrends, isLoading, error } = useFetchTrends();\n\n    return (\n        <Box>\n            <Title>Trending today</Title>\n            {isLoading && <Loader />}\n            {error && <Title>{error}</Title>}\n            {moviesTrends.length && <FilmsList movies={moviesTrends} />}\n        </Box>\n\n    )\n};\n\nexport default Home;","import { useState, useEffect } from 'react';\nimport { getTrendMovies } from 'Servise/Movie-servise';\n\nexport const useFetchTrends = () => {\n    const [moviesTrends, setMoviesTrends] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        const controller = new AbortController();\n\n        const fetchData = async () => {\n            try {\n                setIsLoading(true);\n\n                const fetchedCountries = await getTrendMovies(controller);\n                setMoviesTrends(fetchedCountries);\n            } catch (error) {\n                setError(error.message);\n            } finally {\n                setIsLoading(false);\n                controller.abort();\n            }\n        };\n        fetchData();\n\n        // return () => {\n        //     controller.abort();\n        // };\n    }, []);\n\n    return { moviesTrends, isLoading, error };\n};"],"names":["Title","styled","theme","fonts","roboto","space","MuviesList","MovieTitle","monospace","FilmsList","movies","location","useLocation","as","map","title","id","poster_path","to","routes","state","from","src","alt","useState","moviesTrends","setMoviesTrends","isLoading","setIsLoading","error","setError","useEffect","controller","AbortController","fetchData","getTrendMovies","fetchedCountries","message","abort","useFetchTrends","Box","Loader","length"],"sourceRoot":""}